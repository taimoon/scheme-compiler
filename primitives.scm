(define (char? x) (primcall char? x))
(define (integer? x) (primcall integer? x))
(define (boolean? x) (primcall boolean? x))
(define (null? x) (primcall null? x))
(define (pair? x) (primcall pair? x))
(define (string? x) (primcall string? x))
(define (vector? x) (primcall vector? x))
(define (procedure? x) (primcall procedure? x))
(define (symbol? x) (primcall symbol? x))
(define (char->integer x) (primcall char->integer x))
(define (integer->char x) (primcall integer->char x))
(define (add1 x) (primcall add1 x))
(define (sub1 x) (primcall sub1 x))
(define (zero? x) (primcall zero? x))
(define (+ x y) (primcall + x y))
(define (- x y) (primcall - x y))
(define (* x y) (primcall * x y))
(define (< x y) (primcall < x y))
(define (<= x y) (primcall <= x y))
(define (= x y) (primcall = x y))
(define (> x y) (primcall > x y))
(define (>= x y) (primcall >= x y))
(define (logand x y) (primcall logand x y))
(define (logior x y) (primcall logior x y))
(define (ashl x y) (primcall ashl x y))
(define (ashr x y) (primcall ashr x y))
(define (eq? x y) (primcall eq? x y))
(define (make-string k) (primcall make-string k))
(define (string-ref s i) (primcall string-ref s i))
(define (string-set! s i c) (primcall string-set! s i c))
(define (string-length s) (primcall string-length s))
(define (cons x y) (primcall cons x y))
(define (car p) (primcall car p))
(define (cdr p) (primcall cdr p))
(define (set-car! p y) (primcall set-car! p y))
(define (set-cdr! p y) (primcall set-cdr! p y))
(define (make-vector k) (primcall make-vector k))
(define (vector-length vs) (primcall vector-length vs))
(define (vector-ref vs i) (primcall vector-ref vs i))
(define (vector-set! vs i v) (primcall vector-set! vs i v))
(define (str->sym str) (primcall str->sym str))
(define (sym->str sym) (primcall sym->str sym))
(define (gc-flip sz) (primcall gc-flip sz))
(define (apply f xs) (primcall apply f xs))
(define (vector . x) (list->vector x))
