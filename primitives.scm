(primitives
(add1 n)
(sub1 n)
(+ n m)
(- n m)
(* n m)
(div n m)
(mod n m)
(< n m)
(<= n m)
(= n m)
(>= n m)
(> n m)
(ashl n m)
(ashr n m)
(fxabs fx)
(fxmax fx1 fx2)
(fixnum-width)
(fxlength fx)
(bitwise-and n m)
(bitwise-ior n m)
(eq? x y)
(integer? x)
(char? x)
(char->integer c)
(integer->char i)
(procedure? x)
(boolean? x)
(null? x)
(pair? x)
(cons x y)
(car p)
(cdr p)
(define list (lambda x x))
(define list*
  (lambda (x . xs)
    (let recur ((x x) (xs xs))
      (if (not (pair? xs))
          x
          (cons x (recur (car xs) (cdr xs)))))))
(string? x)
(make-string n ch)
(string-length s)
(string-ref s i)
(string-set! s i c)
(vector? x)
(define vector
  (lambda xs
    (let recur ((xs xs) (sz 0))
      (if (pair? xs)
          (let ((v (recur (cdr xs) (add1 sz))))
            (vector-set! v sz (car xs))
            v)
          (make-vector sz)))))
(make-vector v)
(vector-length v)
(vector-ref v i)
(vector-set! v i x)
(symbol? x)
(eof-object)
(eof-object? e)
(apply fn es)
%string->symbol %symbol->string
%walk-stack
)